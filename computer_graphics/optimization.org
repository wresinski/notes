#+STARTUP: indent

* 应用程序阶段
** 合批（以减少CPU到GPU的传输开销）
*** 采用顶点索引
*** 合并纹理到一张纹理贴图
*** 复用shader，在shader里写分支
*** instance
** C++优化
*** 将数学函数用麦克劳林级数展开替换
*** 注意内存布局以提高访问命中率
* 几何阶段
** 减少顶点数量
*** 裁剪
*** LOD
** 降低数据精度
** 对于可推导的属性，不需要写入顶点缓冲
* 光栅阶段
** 预烘焙
** 对于不需要计算光照的物体不计算其光照
** 用环境贴图代替光照
** 延迟着色技术
** 某些情况下可以关闭Z缓冲，不需要进行测试
** 对于物体的不同远近，使用真实程度不同的渲染方式(shader LOD)
** 优先渲染z缓冲，根据深度测试结果来渲染颜色

* 对于统一的计算数据，尽量往前推到(CPU)；对于各点不同的任务，尽量往后推(Frag Shader)
* 对深度复杂度进行可视化来判断
